
# >>>> SELECTED WINDOW IS KERNAL (KERNEL IS A MATRIX) OF IMAGE --> BLUR IS APPLIED TO CENTRAL PIXEL AND BASE ON CENTERAL TO OTHER SURROUNDING PIXELS <<<<

import cv2 as cv
import numpy as np

img = cv.imread("images/scene.jpg") 
cv.imshow("Scene",img)


# AVERAGING BLUR (AVERAGING BLUR IS DONE BY TAKING THE AVERAGE OF ALL THE PIXELS UNDER THE KERNEL AREA AND REPLACING THE CENTRAL ELEMENT WITH THE AVERAGE VALUE.)
average = cv.blur(img, (7,7)) # (3,3) IS THE KERNEL SIZE (KERNEL SIZE MUST BE ODD NUMBER)
cv.imshow("Average Blur",average)

# GAUSSIAN BLUR (GAUSSIAN BLUR IS DONE BY USING THE GAUSSIAN KERNEL.WE ALSO SHOULD SPECIFY THE STANDARD DEVIATION IN THE X AND Y DIRECTIONS, SIGMAX AND SIGMAY RESPECTIVELY. IF ONLY SIGMAX IS SPECIFIED, SIGMAY IS TAKEN AS EQUAL TO SIGMAX. IF BOTH ARE GIVEN AS ZEROS, THEY ARE CALCULATED FROM THE KERNEL SIZE. GAUSSIAN BLUR IS HIGHLY EFFECTIVE IN REMOVING GAUSSIAN NOISE FROM THE IMAGE.) ---> IT ASSIGNS WEIGHTS TO EACH MATRIX ELEMENT AND FIND THEIR AVERAGE --> MORE NATURAL LOOKING & LESS THAN AVERAGE BLUR
gauss = cv.GaussianBlur(img, (7,7), 0) 
cv.imshow("Gaussian Blur",gauss)

# MEDIAN BLUR (SIMILAR TO AVERAGE BUT INSTEAD OF TAKING AVG OF SURROUNDING PIXELS WE TAKE MEDIAN OF SURROUNDING PIXELS --> LESS NOISE REMOVAL THAN GAUSSIAN BLUR BUT BETTER THAN AVERAGE BLUR AND IT IS EDGE PRESERVATION)
median = cv.medianBlur(img, 7)  # KERNEL SIZE MUST BE ODD NUMBER AND GREATER THAN 1
cv.imshow("Median Blur",median)

# BILATERAL BLUR (BILATERAL BLUR IS VERY EFFECTIVE IN NOISE REMOVAL WHILE KEEPING EDGES SHARP. BUT THE OPERATION IS SLOWER COMPARED TO OTHER FILTERS. WE ALREADY SAW THAT GAUSSIAN FILTER TAKES THE A NEIGHBORHOOD AROUND THE PIXEL AND FINDS ITS GAUSSIAN WEIGHTED AVERAGE. THIS GAUSSIAN FILTER IS A FUNCTION OF SPACE ALONE, THAT IS, NEARBY PIXELS ARE CONSIDERED WHILE BLURRING THE CENTRAL PIXEL. IT IS ON THE BASIS OF EDGES SPECIFICALLY, INTENSITY GRADIENTS. THE BLURRING IS DONE ONLY IF THE PIXEL LIES WITHIN THE DEFINED INTENSITY RANGE. THUS PRESERVING THE EDGES SINCE PIXELS AT EDGES WILL HAVE LARGE INTENSITY VARIATION.)
bilateral = cv.bilateralFilter(img, 15, 35, 35) # 5 IS DIAMETER OF EACH PIXEL NEIGHBORHOOD, SIGMACOLOR IS SIGMA IN COLOR SPACE, SIGMASPACE IS SIGMA IN COORDINATE SPACE
cv.imshow("Bilateral Blur",bilateral) 



cv.waitKey(0)